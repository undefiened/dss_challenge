// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: pkg/api/v1/vrppb/vrp.proto

package vrppb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VertiportReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertiportid     string `protobuf:"bytes,1,opt,name=vertiportid,proto3" json:"vertiportid,omitempty"`
	Reservationtype string `protobuf:"bytes,2,opt,name=reservationtype,proto3" json:"reservationtype,omitempty"`
	TimeStart       *Time  `protobuf:"bytes,3,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	TimeEnd         *Time  `protobuf:"bytes,4,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
}

func (x *VertiportReservation) Reset() {
	*x = VertiportReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertiportReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertiportReservation) ProtoMessage() {}

func (x *VertiportReservation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertiportReservation.ProtoReflect.Descriptor instead.
func (*VertiportReservation) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{0}
}

func (x *VertiportReservation) GetVertiportid() string {
	if x != nil {
		return x.Vertiportid
	}
	return ""
}

func (x *VertiportReservation) GetReservationtype() string {
	if x != nil {
		return x.Reservationtype
	}
	return ""
}

func (x *VertiportReservation) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *VertiportReservation) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	// RFC3339-formatted time/date string.  The time zone must be 'Z'.
	Value *timestamp.Timestamp `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{1}
}

func (x *Time) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Time) GetValue() *timestamp.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

type VertiportConstraintReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Manager string `protobuf:"bytes,2,opt,name=manager,proto3" json:"manager,omitempty"`
	// Opaque version number of this constraint.  Populated only when the ConstraintReference
	// is managed by the USS retrieving or providing it.  Not populated when the
	// ConstraintReference is not managed by the USS retrieving or providing it (instead, the
	// USS must obtain the OVN from the details retrieved from the managing USS).
	Ovn             string `protobuf:"bytes,3,opt,name=ovn,proto3" json:"ovn,omitempty"`
	TimeEnd         *Time  `protobuf:"bytes,4,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	TimeStart       *Time  `protobuf:"bytes,5,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssAvailability string `protobuf:"bytes,6,opt,name=uss_availability,json=ussAvailability,proto3" json:"uss_availability,omitempty"`
	UssBaseUrl      string `protobuf:"bytes,7,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	// Numeric version of this constraint which increments upon each change in the constraint,
	// regardless of whether any field of the constraint reference changes.  A USS with the
	// details of this constraint when it was at a particular version does not need to retrieve
	// the details again until the version changes.
	Version int32 `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VertiportConstraintReference) Reset() {
	*x = VertiportConstraintReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertiportConstraintReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertiportConstraintReference) ProtoMessage() {}

func (x *VertiportConstraintReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertiportConstraintReference.ProtoReflect.Descriptor instead.
func (*VertiportConstraintReference) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{2}
}

func (x *VertiportConstraintReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VertiportConstraintReference) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *VertiportConstraintReference) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *VertiportConstraintReference) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *VertiportConstraintReference) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *VertiportConstraintReference) GetUssAvailability() string {
	if x != nil {
		return x.UssAvailability
	}
	return ""
}

func (x *VertiportConstraintReference) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *VertiportConstraintReference) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type CreateVertiportConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the constraint.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Request body.
	Params *PutVertiportConstraintReferenceParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateVertiportConstraintReferenceRequest) Reset() {
	*x = CreateVertiportConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVertiportConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVertiportConstraintReferenceRequest) ProtoMessage() {}

func (x *CreateVertiportConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVertiportConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateVertiportConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{3}
}

func (x *CreateVertiportConstraintReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *CreateVertiportConstraintReferenceRequest) GetParams() *PutVertiportConstraintReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Parameters for a request to create/update a ConstraintReference in the DSS.
type PutVertiportConstraintReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VertiportReservation []*VertiportReservation `protobuf:"bytes,1,rep,name=vertiport_reservation,json=vertiportReservation,proto3" json:"vertiport_reservation,omitempty"`
	UssBaseUrl           string                  `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutVertiportConstraintReferenceParameters) Reset() {
	*x = PutVertiportConstraintReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutVertiportConstraintReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutVertiportConstraintReferenceParameters) ProtoMessage() {}

func (x *PutVertiportConstraintReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutVertiportConstraintReferenceParameters.ProtoReflect.Descriptor instead.
func (*PutVertiportConstraintReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{4}
}

func (x *PutVertiportConstraintReferenceParameters) GetVertiportReservation() []*VertiportReservation {
	if x != nil {
		return x.VertiportReservation
	}
	return nil
}

func (x *PutVertiportConstraintReferenceParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type ChangeVertiportConstraintReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintReference *VertiportConstraintReference `protobuf:"bytes,1,opt,name=constraint_reference,json=constraintReference,proto3" json:"constraint_reference,omitempty"`
	// DSS subscribers that this client now has the obligation to notify of the constraint changes just made.  This client must call POST for each provided URL according to the USS-USS `/uss/v1/constraints` path API.  The client's own subscriptions will also be included in this list.
	Subscribers []*VertiportSubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *ChangeVertiportConstraintReferenceResponse) Reset() {
	*x = ChangeVertiportConstraintReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeVertiportConstraintReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeVertiportConstraintReferenceResponse) ProtoMessage() {}

func (x *ChangeVertiportConstraintReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeVertiportConstraintReferenceResponse.ProtoReflect.Descriptor instead.
func (*ChangeVertiportConstraintReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeVertiportConstraintReferenceResponse) GetConstraintReference() *VertiportConstraintReference {
	if x != nil {
		return x.ConstraintReference
	}
	return nil
}

func (x *ChangeVertiportConstraintReferenceResponse) GetSubscribers() []*VertiportSubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

type VertiportSubscriptionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationIndex int32  `protobuf:"varint,1,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	SubscriptionId    string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *VertiportSubscriptionState) Reset() {
	*x = VertiportSubscriptionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertiportSubscriptionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertiportSubscriptionState) ProtoMessage() {}

func (x *VertiportSubscriptionState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertiportSubscriptionState.ProtoReflect.Descriptor instead.
func (*VertiportSubscriptionState) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{6}
}

func (x *VertiportSubscriptionState) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *VertiportSubscriptionState) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type VertiportSubscriberToNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscription(s) prompting this notification.
	Subscriptions []*VertiportSubscriptionState `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	UssBaseUrl    string                        `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *VertiportSubscriberToNotify) Reset() {
	*x = VertiportSubscriberToNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertiportSubscriberToNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertiportSubscriberToNotify) ProtoMessage() {}

func (x *VertiportSubscriberToNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertiportSubscriberToNotify.ProtoReflect.Descriptor instead.
func (*VertiportSubscriberToNotify) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{7}
}

func (x *VertiportSubscriberToNotify) GetSubscriptions() []*VertiportSubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *VertiportSubscriberToNotify) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type CreateVertiportOperationalIntentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the operational intent.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Request body.
	Params *PutVertiportOperationalIntentReferenceParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateVertiportOperationalIntentReferenceRequest) Reset() {
	*x = CreateVertiportOperationalIntentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVertiportOperationalIntentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVertiportOperationalIntentReferenceRequest) ProtoMessage() {}

func (x *CreateVertiportOperationalIntentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVertiportOperationalIntentReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateVertiportOperationalIntentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{8}
}

func (x *CreateVertiportOperationalIntentReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *CreateVertiportOperationalIntentReferenceRequest) GetParams() *PutVertiportOperationalIntentReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type PutVertiportOperationalIntentReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VertiportReservation []*VertiportReservation                  `protobuf:"bytes,1,rep,name=vertiport_reservation,json=vertiportReservation,proto3" json:"vertiport_reservation,omitempty"`
	Key                  []string                                 `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	NewSubscription      *ImplicitVertiportSubscriptionParameters `protobuf:"bytes,3,opt,name=new_subscription,json=newSubscription,proto3" json:"new_subscription,omitempty"`
	State                string                                   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	SubscriptionId       string                                   `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	UssBaseUrl           string                                   `protobuf:"bytes,6,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutVertiportOperationalIntentReferenceParameters) Reset() {
	*x = PutVertiportOperationalIntentReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutVertiportOperationalIntentReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutVertiportOperationalIntentReferenceParameters) ProtoMessage() {}

func (x *PutVertiportOperationalIntentReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutVertiportOperationalIntentReferenceParameters.ProtoReflect.Descriptor instead.
func (*PutVertiportOperationalIntentReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{9}
}

func (x *PutVertiportOperationalIntentReferenceParameters) GetVertiportReservation() []*VertiportReservation {
	if x != nil {
		return x.VertiportReservation
	}
	return nil
}

func (x *PutVertiportOperationalIntentReferenceParameters) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutVertiportOperationalIntentReferenceParameters) GetNewSubscription() *ImplicitVertiportSubscriptionParameters {
	if x != nil {
		return x.NewSubscription
	}
	return nil
}

func (x *PutVertiportOperationalIntentReferenceParameters) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PutVertiportOperationalIntentReferenceParameters) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *PutVertiportOperationalIntentReferenceParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type ImplicitVertiportSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyForConstraints bool   `protobuf:"varint,1,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	UssBaseUrl           string `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *ImplicitVertiportSubscriptionParameters) Reset() {
	*x = ImplicitVertiportSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplicitVertiportSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplicitVertiportSubscriptionParameters) ProtoMessage() {}

func (x *ImplicitVertiportSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplicitVertiportSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*ImplicitVertiportSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{10}
}

func (x *ImplicitVertiportSubscriptionParameters) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *ImplicitVertiportSubscriptionParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type ChangeVertiportOperationalIntentReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationalIntentReference *VertiportOperationalIntentReference `protobuf:"bytes,1,opt,name=operational_intent_reference,json=operationalIntentReference,proto3" json:"operational_intent_reference,omitempty"`
	Subscribers                []*VertiportSubscriberToNotify       `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *ChangeVertiportOperationalIntentReferenceResponse) Reset() {
	*x = ChangeVertiportOperationalIntentReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeVertiportOperationalIntentReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeVertiportOperationalIntentReferenceResponse) ProtoMessage() {}

func (x *ChangeVertiportOperationalIntentReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeVertiportOperationalIntentReferenceResponse.ProtoReflect.Descriptor instead.
func (*ChangeVertiportOperationalIntentReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{11}
}

func (x *ChangeVertiportOperationalIntentReferenceResponse) GetOperationalIntentReference() *VertiportOperationalIntentReference {
	if x != nil {
		return x.OperationalIntentReference
	}
	return nil
}

func (x *ChangeVertiportOperationalIntentReferenceResponse) GetSubscribers() []*VertiportSubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

type VertiportOperationalIntentReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Manager         string `protobuf:"bytes,2,opt,name=manager,proto3" json:"manager,omitempty"`
	Ovn             string `protobuf:"bytes,3,opt,name=ovn,proto3" json:"ovn,omitempty"`
	State           string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	SubscriptionId  string `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TimeEnd         *Time  `protobuf:"bytes,6,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	TimeStart       *Time  `protobuf:"bytes,7,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssAvailability string `protobuf:"bytes,8,opt,name=uss_availability,json=ussAvailability,proto3" json:"uss_availability,omitempty"`
	UssBaseUrl      string `protobuf:"bytes,9,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	Version         int32  `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VertiportOperationalIntentReference) Reset() {
	*x = VertiportOperationalIntentReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertiportOperationalIntentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertiportOperationalIntentReference) ProtoMessage() {}

func (x *VertiportOperationalIntentReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertiportOperationalIntentReference.ProtoReflect.Descriptor instead.
func (*VertiportOperationalIntentReference) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{12}
}

func (x *VertiportOperationalIntentReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VertiportOperationalIntentReference) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *VertiportOperationalIntentReference) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *VertiportOperationalIntentReference) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *VertiportOperationalIntentReference) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *VertiportOperationalIntentReference) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *VertiportOperationalIntentReference) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *VertiportOperationalIntentReference) GetUssAvailability() string {
	if x != nil {
		return x.UssAvailability
	}
	return ""
}

func (x *VertiportOperationalIntentReference) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *VertiportOperationalIntentReference) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type CreateVertiportSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params         *PutVertiportSubscriptionParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Subscriptionid string                              `protobuf:"bytes,2,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
}

func (x *CreateVertiportSubscriptionRequest) Reset() {
	*x = CreateVertiportSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVertiportSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVertiportSubscriptionRequest) ProtoMessage() {}

func (x *CreateVertiportSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVertiportSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateVertiportSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{13}
}

func (x *CreateVertiportSubscriptionRequest) GetParams() *PutVertiportSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreateVertiportSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

type PutVertiportSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VertiportReservation        *VertiportReservation `protobuf:"bytes,1,opt,name=vertiport_reservation,json=vertiportReservation,proto3" json:"vertiport_reservation,omitempty"`
	NotifyForConstraints        bool                  `protobuf:"varint,2,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	NotifyForOperationalIntents bool                  `protobuf:"varint,3,opt,name=notify_for_operational_intents,json=notifyForOperationalIntents,proto3" json:"notify_for_operational_intents,omitempty"`
	UssBaseUrl                  string                `protobuf:"bytes,4,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutVertiportSubscriptionParameters) Reset() {
	*x = PutVertiportSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutVertiportSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutVertiportSubscriptionParameters) ProtoMessage() {}

func (x *PutVertiportSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutVertiportSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*PutVertiportSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{14}
}

func (x *PutVertiportSubscriptionParameters) GetVertiportReservation() *VertiportReservation {
	if x != nil {
		return x.VertiportReservation
	}
	return nil
}

func (x *PutVertiportSubscriptionParameters) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *PutVertiportSubscriptionParameters) GetNotifyForOperationalIntents() bool {
	if x != nil {
		return x.NotifyForOperationalIntents
	}
	return false
}

func (x *PutVertiportSubscriptionParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type PutVertiportSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintReferences        []*VertiportConstraintReference        `protobuf:"bytes,1,rep,name=constraint_references,json=constraintReferences,proto3" json:"constraint_references,omitempty"`
	OperationalIntentReferences []*VertiportOperationalIntentReference `protobuf:"bytes,2,rep,name=operational_intent_references,json=operationalIntentReferences,proto3" json:"operational_intent_references,omitempty"`
	Subscription                *VertiportSubscription                 `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *PutVertiportSubscriptionResponse) Reset() {
	*x = PutVertiportSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutVertiportSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutVertiportSubscriptionResponse) ProtoMessage() {}

func (x *PutVertiportSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutVertiportSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*PutVertiportSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{15}
}

func (x *PutVertiportSubscriptionResponse) GetConstraintReferences() []*VertiportConstraintReference {
	if x != nil {
		return x.ConstraintReferences
	}
	return nil
}

func (x *PutVertiportSubscriptionResponse) GetOperationalIntentReferences() []*VertiportOperationalIntentReference {
	if x != nil {
		return x.OperationalIntentReferences
	}
	return nil
}

func (x *PutVertiportSubscriptionResponse) GetSubscription() *VertiportSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type VertiportSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DependentOperationalIntents []string `protobuf:"bytes,1,rep,name=dependent_operational_intents,json=dependentOperationalIntents,proto3" json:"dependent_operational_intents,omitempty"`
	Id                          string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ImplicitSubscription        bool     `protobuf:"varint,3,opt,name=implicit_subscription,json=implicitSubscription,proto3" json:"implicit_subscription,omitempty"`
	NotificationIndex           int32    `protobuf:"varint,4,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	NotifyForConstraints        bool     `protobuf:"varint,5,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	NotifyForOperationalIntents bool     `protobuf:"varint,6,opt,name=notify_for_operational_intents,json=notifyForOperationalIntents,proto3" json:"notify_for_operational_intents,omitempty"`
	TimeEnd                     *Time    `protobuf:"bytes,7,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	TimeStart                   *Time    `protobuf:"bytes,8,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssBaseUrl                  string   `protobuf:"bytes,9,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	Version                     string   `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VertiportSubscription) Reset() {
	*x = VertiportSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertiportSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertiportSubscription) ProtoMessage() {}

func (x *VertiportSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertiportSubscription.ProtoReflect.Descriptor instead.
func (*VertiportSubscription) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{16}
}

func (x *VertiportSubscription) GetDependentOperationalIntents() []string {
	if x != nil {
		return x.DependentOperationalIntents
	}
	return nil
}

func (x *VertiportSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VertiportSubscription) GetImplicitSubscription() bool {
	if x != nil {
		return x.ImplicitSubscription
	}
	return false
}

func (x *VertiportSubscription) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *VertiportSubscription) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *VertiportSubscription) GetNotifyForOperationalIntents() bool {
	if x != nil {
		return x.NotifyForOperationalIntents
	}
	return false
}

func (x *VertiportSubscription) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *VertiportSubscription) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *VertiportSubscription) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *VertiportSubscription) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DeleteVertiportConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the constraint.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Opaque version number of the existing operational intent reference.
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
}

func (x *DeleteVertiportConstraintReferenceRequest) Reset() {
	*x = DeleteVertiportConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVertiportConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVertiportConstraintReferenceRequest) ProtoMessage() {}

func (x *DeleteVertiportConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVertiportConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteVertiportConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteVertiportConstraintReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *DeleteVertiportConstraintReferenceRequest) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

type DeleteVertiportOperationalIntentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the operational intent.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Opaque version number of the existing operational intent reference.
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
}

func (x *DeleteVertiportOperationalIntentReferenceRequest) Reset() {
	*x = DeleteVertiportOperationalIntentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVertiportOperationalIntentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVertiportOperationalIntentReferenceRequest) ProtoMessage() {}

func (x *DeleteVertiportOperationalIntentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVertiportOperationalIntentReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteVertiportOperationalIntentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteVertiportOperationalIntentReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *DeleteVertiportOperationalIntentReferenceRequest) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

type QueryVertiportConstraintReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationOfInterest *VertiportReservation `protobuf:"bytes,1,opt,name=reservation_of_interest,json=reservationOfInterest,proto3" json:"reservation_of_interest,omitempty"`
}

func (x *QueryVertiportConstraintReferenceParameters) Reset() {
	*x = QueryVertiportConstraintReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportConstraintReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportConstraintReferenceParameters) ProtoMessage() {}

func (x *QueryVertiportConstraintReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportConstraintReferenceParameters.ProtoReflect.Descriptor instead.
func (*QueryVertiportConstraintReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{19}
}

func (x *QueryVertiportConstraintReferenceParameters) GetReservationOfInterest() *VertiportReservation {
	if x != nil {
		return x.ReservationOfInterest
	}
	return nil
}

type QueryVertiportConstraintReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *QueryVertiportConstraintReferenceParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryVertiportConstraintReferencesRequest) Reset() {
	*x = QueryVertiportConstraintReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportConstraintReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportConstraintReferencesRequest) ProtoMessage() {}

func (x *QueryVertiportConstraintReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportConstraintReferencesRequest.ProtoReflect.Descriptor instead.
func (*QueryVertiportConstraintReferencesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{20}
}

func (x *QueryVertiportConstraintReferencesRequest) GetParams() *QueryVertiportConstraintReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type DeleteVertiportSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,1,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
	// Version of the subscription to be modified.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteVertiportSubscriptionRequest) Reset() {
	*x = DeleteVertiportSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVertiportSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVertiportSubscriptionRequest) ProtoMessage() {}

func (x *DeleteVertiportSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVertiportSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteVertiportSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteVertiportSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

func (x *DeleteVertiportSubscriptionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DeleteVertiportSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *VertiportSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *DeleteVertiportSubscriptionResponse) Reset() {
	*x = DeleteVertiportSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVertiportSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVertiportSubscriptionResponse) ProtoMessage() {}

func (x *DeleteVertiportSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVertiportSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteVertiportSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteVertiportSubscriptionResponse) GetSubscription() *VertiportSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type GetVertiportConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the constraint.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
}

func (x *GetVertiportConstraintReferenceRequest) Reset() {
	*x = GetVertiportConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVertiportConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVertiportConstraintReferenceRequest) ProtoMessage() {}

func (x *GetVertiportConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVertiportConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetVertiportConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{23}
}

func (x *GetVertiportConstraintReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

type GetVertiportConstraintReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintReference *VertiportConstraintReference `protobuf:"bytes,1,opt,name=constraint_reference,json=constraintReference,proto3" json:"constraint_reference,omitempty"`
}

func (x *GetVertiportConstraintReferenceResponse) Reset() {
	*x = GetVertiportConstraintReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVertiportConstraintReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVertiportConstraintReferenceResponse) ProtoMessage() {}

func (x *GetVertiportConstraintReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVertiportConstraintReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetVertiportConstraintReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{24}
}

func (x *GetVertiportConstraintReferenceResponse) GetConstraintReference() *VertiportConstraintReference {
	if x != nil {
		return x.ConstraintReference
	}
	return nil
}

type GetVertiportOperationalIntentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the operational intent.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
}

func (x *GetVertiportOperationalIntentReferenceRequest) Reset() {
	*x = GetVertiportOperationalIntentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVertiportOperationalIntentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVertiportOperationalIntentReferenceRequest) ProtoMessage() {}

func (x *GetVertiportOperationalIntentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVertiportOperationalIntentReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetVertiportOperationalIntentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{25}
}

func (x *GetVertiportOperationalIntentReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

type GetVertiportOperationalIntentReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationalIntentReference *VertiportOperationalIntentReference `protobuf:"bytes,1,opt,name=operational_intent_reference,json=operationalIntentReference,proto3" json:"operational_intent_reference,omitempty"`
}

func (x *GetVertiportOperationalIntentReferenceResponse) Reset() {
	*x = GetVertiportOperationalIntentReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVertiportOperationalIntentReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVertiportOperationalIntentReferenceResponse) ProtoMessage() {}

func (x *GetVertiportOperationalIntentReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVertiportOperationalIntentReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetVertiportOperationalIntentReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{26}
}

func (x *GetVertiportOperationalIntentReferenceResponse) GetOperationalIntentReference() *VertiportOperationalIntentReference {
	if x != nil {
		return x.OperationalIntentReference
	}
	return nil
}

type GetVertiportSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,1,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
}

func (x *GetVertiportSubscriptionRequest) Reset() {
	*x = GetVertiportSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVertiportSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVertiportSubscriptionRequest) ProtoMessage() {}

func (x *GetVertiportSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVertiportSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetVertiportSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{27}
}

func (x *GetVertiportSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

type GetVertiportSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *VertiportSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *GetVertiportSubscriptionResponse) Reset() {
	*x = GetVertiportSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVertiportSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVertiportSubscriptionResponse) ProtoMessage() {}

func (x *GetVertiportSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVertiportSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetVertiportSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{28}
}

func (x *GetVertiportSubscriptionResponse) GetSubscription() *VertiportSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type QueryVertiportConstraintReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ConstraintReferences in the area of interest.
	ConstraintReferences []*VertiportConstraintReference `protobuf:"bytes,1,rep,name=constraint_references,json=constraintReferences,proto3" json:"constraint_references,omitempty"`
}

func (x *QueryVertiportConstraintReferencesResponse) Reset() {
	*x = QueryVertiportConstraintReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportConstraintReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportConstraintReferencesResponse) ProtoMessage() {}

func (x *QueryVertiportConstraintReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportConstraintReferencesResponse.ProtoReflect.Descriptor instead.
func (*QueryVertiportConstraintReferencesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{29}
}

func (x *QueryVertiportConstraintReferencesResponse) GetConstraintReferences() []*VertiportConstraintReference {
	if x != nil {
		return x.ConstraintReferences
	}
	return nil
}

type QueryVertiportOperationalIntentReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OperationalIntentReferences in the area of interest.
	OperationalIntentReferences []*VertiportOperationalIntentReference `protobuf:"bytes,1,rep,name=operational_intent_references,json=operationalIntentReferences,proto3" json:"operational_intent_references,omitempty"`
}

func (x *QueryVertiportOperationalIntentReferenceResponse) Reset() {
	*x = QueryVertiportOperationalIntentReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportOperationalIntentReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportOperationalIntentReferenceResponse) ProtoMessage() {}

func (x *QueryVertiportOperationalIntentReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportOperationalIntentReferenceResponse.ProtoReflect.Descriptor instead.
func (*QueryVertiportOperationalIntentReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{30}
}

func (x *QueryVertiportOperationalIntentReferenceResponse) GetOperationalIntentReferences() []*VertiportOperationalIntentReference {
	if x != nil {
		return x.OperationalIntentReferences
	}
	return nil
}

type QueryVertiportOperationalIntentReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *QueryVertiportOperationalIntentReferenceParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryVertiportOperationalIntentReferencesRequest) Reset() {
	*x = QueryVertiportOperationalIntentReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportOperationalIntentReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportOperationalIntentReferencesRequest) ProtoMessage() {}

func (x *QueryVertiportOperationalIntentReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportOperationalIntentReferencesRequest.ProtoReflect.Descriptor instead.
func (*QueryVertiportOperationalIntentReferencesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{31}
}

func (x *QueryVertiportOperationalIntentReferencesRequest) GetParams() *QueryVertiportOperationalIntentReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Parameters for a request to find OperationalIntentReferences matching the provided criteria.
type QueryVertiportOperationalIntentReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VertiportReservationOfInterest *VertiportReservation `protobuf:"bytes,1,opt,name=vertiport_reservation_of_interest,json=vertiportReservationOfInterest,proto3" json:"vertiport_reservation_of_interest,omitempty"`
}

func (x *QueryVertiportOperationalIntentReferenceParameters) Reset() {
	*x = QueryVertiportOperationalIntentReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportOperationalIntentReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportOperationalIntentReferenceParameters) ProtoMessage() {}

func (x *QueryVertiportOperationalIntentReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportOperationalIntentReferenceParameters.ProtoReflect.Descriptor instead.
func (*QueryVertiportOperationalIntentReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{32}
}

func (x *QueryVertiportOperationalIntentReferenceParameters) GetVertiportReservationOfInterest() *VertiportReservation {
	if x != nil {
		return x.VertiportReservationOfInterest
	}
	return nil
}

// Parameters for a request to find subscriptions matching the provided criteria.
type QueryVertiportSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VertiportReservationOfInterest *VertiportReservation `protobuf:"bytes,1,opt,name=vertiport_reservation_of_interest,json=vertiportReservationOfInterest,proto3" json:"vertiport_reservation_of_interest,omitempty"`
}

func (x *QueryVertiportSubscriptionParameters) Reset() {
	*x = QueryVertiportSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportSubscriptionParameters) ProtoMessage() {}

func (x *QueryVertiportSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*QueryVertiportSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{33}
}

func (x *QueryVertiportSubscriptionParameters) GetVertiportReservationOfInterest() *VertiportReservation {
	if x != nil {
		return x.VertiportReservationOfInterest
	}
	return nil
}

type QueryVertiportSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *QueryVertiportSubscriptionParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryVertiportSubscriptionsRequest) Reset() {
	*x = QueryVertiportSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportSubscriptionsRequest) ProtoMessage() {}

func (x *QueryVertiportSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*QueryVertiportSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{34}
}

func (x *QueryVertiportSubscriptionsRequest) GetParams() *QueryVertiportSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Response to DSS query for subscriptions in a particular vertiport area.
type QueryVertiportSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriptions that overlap the specified vertiports areas.
	Subscriptions []*VertiportSubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *QueryVertiportSubscriptionsResponse) Reset() {
	*x = QueryVertiportSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVertiportSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVertiportSubscriptionsResponse) ProtoMessage() {}

func (x *QueryVertiportSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVertiportSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*QueryVertiportSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{35}
}

func (x *QueryVertiportSubscriptionsResponse) GetSubscriptions() []*VertiportSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type UpdateVertiportConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the constraint.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Opaque version number of the existing operational intent reference.
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
	// Request body.
	Params *PutVertiportConstraintReferenceParameters `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdateVertiportConstraintReferenceRequest) Reset() {
	*x = UpdateVertiportConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVertiportConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVertiportConstraintReferenceRequest) ProtoMessage() {}

func (x *UpdateVertiportConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVertiportConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateVertiportConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateVertiportConstraintReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *UpdateVertiportConstraintReferenceRequest) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *UpdateVertiportConstraintReferenceRequest) GetParams() *PutVertiportConstraintReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdateVertiportOperationalIntentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the operational intent.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Opaque version number of the existing operational intent reference.
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
	// Request body.
	Params *PutVertiportOperationalIntentReferenceParameters `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdateVertiportOperationalIntentReferenceRequest) Reset() {
	*x = UpdateVertiportOperationalIntentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVertiportOperationalIntentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVertiportOperationalIntentReferenceRequest) ProtoMessage() {}

func (x *UpdateVertiportOperationalIntentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVertiportOperationalIntentReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateVertiportOperationalIntentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateVertiportOperationalIntentReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *UpdateVertiportOperationalIntentReferenceRequest) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *UpdateVertiportOperationalIntentReferenceRequest) GetParams() *PutVertiportOperationalIntentReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdateVertiportSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *PutVertiportSubscriptionParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// SubscriptionID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,2,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
	// Version of the subscription to be modified.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateVertiportSubscriptionRequest) Reset() {
	*x = UpdateVertiportSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVertiportSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVertiportSubscriptionRequest) ProtoMessage() {}

func (x *UpdateVertiportSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_vrppb_vrp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVertiportSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateVertiportSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateVertiportSubscriptionRequest) GetParams() *PutVertiportSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateVertiportSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

func (x *UpdateVertiportSubscriptionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_pkg_api_v1_vrppb_vrp_proto protoreflect.FileDescriptor

var file_pkg_api_v1_vrppb_vrp_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x72, 0x70,
	0x70, 0x62, 0x2f, 0x76, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x76, 0x72,
	0x70, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x72,
	0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0x50, 0x0a, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x02,
	0x0a, 0x1c, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x72, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12,
	0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x29, 0x50, 0x75,
	0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xca, 0x01, 0x0a, 0x2a,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x74, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x88,
	0x01, 0x0a, 0x1b, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x47,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x30, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x76, 0x72, 0x70,
	0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x30,
	0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x50, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f,
	0x6e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0x81, 0x01, 0x0a, 0x27, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0xe7, 0x01, 0x0a, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0xdb,
	0x02, 0x0a, 0x23, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x76, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x93,
	0x02, 0x0a, 0x22, 0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0xae, 0x02, 0x0a, 0x20, 0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x1d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x72, 0x70,
	0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x72, 0x70, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x03, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x1d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x76, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x22, 0x60, 0x0a,
	0x30, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x76, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x22,
	0x82, 0x01, 0x0a, 0x2b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x53, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x66, 0x0a,
	0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x72,
	0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x2a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0xa2, 0x01, 0x0a, 0x30, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70,
	0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76,
	0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x30, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x76, 0x72, 0x70,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9c, 0x01,
	0x0a, 0x32, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x21, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a,
	0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x21, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a,
	0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x69, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x76, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x12,
	0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x30, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x12, 0x4f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x76,
	0x72, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xa9, 0x01,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xa3, 0x18, 0x0a, 0x17, 0x55, 0x54,
	0x4d, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x76,
	0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x1a, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x3a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xea, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x37, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x76,
	0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x1a, 0x3a,
	0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x1a, 0x30,
	0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d,
	0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x30, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x64,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x6f, 0x76, 0x6e, 0x7d, 0x12, 0xe8, 0x01, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x2a,
	0x40, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x6f, 0x76, 0x6e,
	0x7d, 0x12, 0xaf, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x2a, 0x3a, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x7d, 0x12, 0xbc, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32,
	0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69,
	0x64, 0x7d, 0x12, 0xd9, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70,
	0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x2e,
	0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x12, 0xa5,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x76, 0x72,
	0x70, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e,
	0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x2d, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0xe4, 0x01, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x37, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x35, 0x2f, 0x64, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x25, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x2e,
	0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x1a, 0x38, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x2f, 0x7b,
	0x6f, 0x76, 0x6e, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xf0, 0x01, 0x0a,
	0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x2e, 0x76, 0x72, 0x70,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x1a, 0x40, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64,
	0x7d, 0x2f, 0x7b, 0x6f, 0x76, 0x6e, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0xbd, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x76, 0x72, 0x70, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x72, 0x70,
	0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x1a, 0x3a, 0x2f, 0x64, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42,
	0x12, 0x5a, 0x10, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x72,
	0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_v1_vrppb_vrp_proto_rawDescOnce sync.Once
	file_pkg_api_v1_vrppb_vrp_proto_rawDescData = file_pkg_api_v1_vrppb_vrp_proto_rawDesc
)

func file_pkg_api_v1_vrppb_vrp_proto_rawDescGZIP() []byte {
	file_pkg_api_v1_vrppb_vrp_proto_rawDescOnce.Do(func() {
		file_pkg_api_v1_vrppb_vrp_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_v1_vrppb_vrp_proto_rawDescData)
	})
	return file_pkg_api_v1_vrppb_vrp_proto_rawDescData
}

var file_pkg_api_v1_vrppb_vrp_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_pkg_api_v1_vrppb_vrp_proto_goTypes = []interface{}{
	(*VertiportReservation)(nil),                               // 0: vrppb.VertiportReservation
	(*Time)(nil),                                               // 1: vrppb.Time
	(*VertiportConstraintReference)(nil),                       // 2: vrppb.VertiportConstraintReference
	(*CreateVertiportConstraintReferenceRequest)(nil),          // 3: vrppb.CreateVertiportConstraintReferenceRequest
	(*PutVertiportConstraintReferenceParameters)(nil),          // 4: vrppb.PutVertiportConstraintReferenceParameters
	(*ChangeVertiportConstraintReferenceResponse)(nil),         // 5: vrppb.ChangeVertiportConstraintReferenceResponse
	(*VertiportSubscriptionState)(nil),                         // 6: vrppb.VertiportSubscriptionState
	(*VertiportSubscriberToNotify)(nil),                        // 7: vrppb.VertiportSubscriberToNotify
	(*CreateVertiportOperationalIntentReferenceRequest)(nil),   // 8: vrppb.CreateVertiportOperationalIntentReferenceRequest
	(*PutVertiportOperationalIntentReferenceParameters)(nil),   // 9: vrppb.PutVertiportOperationalIntentReferenceParameters
	(*ImplicitVertiportSubscriptionParameters)(nil),            // 10: vrppb.ImplicitVertiportSubscriptionParameters
	(*ChangeVertiportOperationalIntentReferenceResponse)(nil),  // 11: vrppb.ChangeVertiportOperationalIntentReferenceResponse
	(*VertiportOperationalIntentReference)(nil),                // 12: vrppb.VertiportOperationalIntentReference
	(*CreateVertiportSubscriptionRequest)(nil),                 // 13: vrppb.CreateVertiportSubscriptionRequest
	(*PutVertiportSubscriptionParameters)(nil),                 // 14: vrppb.PutVertiportSubscriptionParameters
	(*PutVertiportSubscriptionResponse)(nil),                   // 15: vrppb.PutVertiportSubscriptionResponse
	(*VertiportSubscription)(nil),                              // 16: vrppb.VertiportSubscription
	(*DeleteVertiportConstraintReferenceRequest)(nil),          // 17: vrppb.DeleteVertiportConstraintReferenceRequest
	(*DeleteVertiportOperationalIntentReferenceRequest)(nil),   // 18: vrppb.DeleteVertiportOperationalIntentReferenceRequest
	(*QueryVertiportConstraintReferenceParameters)(nil),        // 19: vrppb.QueryVertiportConstraintReferenceParameters
	(*QueryVertiportConstraintReferencesRequest)(nil),          // 20: vrppb.QueryVertiportConstraintReferencesRequest
	(*DeleteVertiportSubscriptionRequest)(nil),                 // 21: vrppb.DeleteVertiportSubscriptionRequest
	(*DeleteVertiportSubscriptionResponse)(nil),                // 22: vrppb.DeleteVertiportSubscriptionResponse
	(*GetVertiportConstraintReferenceRequest)(nil),             // 23: vrppb.GetVertiportConstraintReferenceRequest
	(*GetVertiportConstraintReferenceResponse)(nil),            // 24: vrppb.GetVertiportConstraintReferenceResponse
	(*GetVertiportOperationalIntentReferenceRequest)(nil),      // 25: vrppb.GetVertiportOperationalIntentReferenceRequest
	(*GetVertiportOperationalIntentReferenceResponse)(nil),     // 26: vrppb.GetVertiportOperationalIntentReferenceResponse
	(*GetVertiportSubscriptionRequest)(nil),                    // 27: vrppb.GetVertiportSubscriptionRequest
	(*GetVertiportSubscriptionResponse)(nil),                   // 28: vrppb.GetVertiportSubscriptionResponse
	(*QueryVertiportConstraintReferencesResponse)(nil),         // 29: vrppb.QueryVertiportConstraintReferencesResponse
	(*QueryVertiportOperationalIntentReferenceResponse)(nil),   // 30: vrppb.QueryVertiportOperationalIntentReferenceResponse
	(*QueryVertiportOperationalIntentReferencesRequest)(nil),   // 31: vrppb.QueryVertiportOperationalIntentReferencesRequest
	(*QueryVertiportOperationalIntentReferenceParameters)(nil), // 32: vrppb.QueryVertiportOperationalIntentReferenceParameters
	(*QueryVertiportSubscriptionParameters)(nil),               // 33: vrppb.QueryVertiportSubscriptionParameters
	(*QueryVertiportSubscriptionsRequest)(nil),                 // 34: vrppb.QueryVertiportSubscriptionsRequest
	(*QueryVertiportSubscriptionsResponse)(nil),                // 35: vrppb.QueryVertiportSubscriptionsResponse
	(*UpdateVertiportConstraintReferenceRequest)(nil),          // 36: vrppb.UpdateVertiportConstraintReferenceRequest
	(*UpdateVertiportOperationalIntentReferenceRequest)(nil),   // 37: vrppb.UpdateVertiportOperationalIntentReferenceRequest
	(*UpdateVertiportSubscriptionRequest)(nil),                 // 38: vrppb.UpdateVertiportSubscriptionRequest
	(*timestamp.Timestamp)(nil),                                // 39: google.protobuf.Timestamp
}
var file_pkg_api_v1_vrppb_vrp_proto_depIdxs = []int32{
	1,  // 0: vrppb.VertiportReservation.time_start:type_name -> vrppb.Time
	1,  // 1: vrppb.VertiportReservation.time_end:type_name -> vrppb.Time
	39, // 2: vrppb.Time.value:type_name -> google.protobuf.Timestamp
	1,  // 3: vrppb.VertiportConstraintReference.time_end:type_name -> vrppb.Time
	1,  // 4: vrppb.VertiportConstraintReference.time_start:type_name -> vrppb.Time
	4,  // 5: vrppb.CreateVertiportConstraintReferenceRequest.params:type_name -> vrppb.PutVertiportConstraintReferenceParameters
	0,  // 6: vrppb.PutVertiportConstraintReferenceParameters.vertiport_reservation:type_name -> vrppb.VertiportReservation
	2,  // 7: vrppb.ChangeVertiportConstraintReferenceResponse.constraint_reference:type_name -> vrppb.VertiportConstraintReference
	7,  // 8: vrppb.ChangeVertiportConstraintReferenceResponse.subscribers:type_name -> vrppb.VertiportSubscriberToNotify
	6,  // 9: vrppb.VertiportSubscriberToNotify.subscriptions:type_name -> vrppb.VertiportSubscriptionState
	9,  // 10: vrppb.CreateVertiportOperationalIntentReferenceRequest.params:type_name -> vrppb.PutVertiportOperationalIntentReferenceParameters
	0,  // 11: vrppb.PutVertiportOperationalIntentReferenceParameters.vertiport_reservation:type_name -> vrppb.VertiportReservation
	10, // 12: vrppb.PutVertiportOperationalIntentReferenceParameters.new_subscription:type_name -> vrppb.ImplicitVertiportSubscriptionParameters
	12, // 13: vrppb.ChangeVertiportOperationalIntentReferenceResponse.operational_intent_reference:type_name -> vrppb.VertiportOperationalIntentReference
	7,  // 14: vrppb.ChangeVertiportOperationalIntentReferenceResponse.subscribers:type_name -> vrppb.VertiportSubscriberToNotify
	1,  // 15: vrppb.VertiportOperationalIntentReference.time_end:type_name -> vrppb.Time
	1,  // 16: vrppb.VertiportOperationalIntentReference.time_start:type_name -> vrppb.Time
	14, // 17: vrppb.CreateVertiportSubscriptionRequest.params:type_name -> vrppb.PutVertiportSubscriptionParameters
	0,  // 18: vrppb.PutVertiportSubscriptionParameters.vertiport_reservation:type_name -> vrppb.VertiportReservation
	2,  // 19: vrppb.PutVertiportSubscriptionResponse.constraint_references:type_name -> vrppb.VertiportConstraintReference
	12, // 20: vrppb.PutVertiportSubscriptionResponse.operational_intent_references:type_name -> vrppb.VertiportOperationalIntentReference
	16, // 21: vrppb.PutVertiportSubscriptionResponse.subscription:type_name -> vrppb.VertiportSubscription
	1,  // 22: vrppb.VertiportSubscription.time_end:type_name -> vrppb.Time
	1,  // 23: vrppb.VertiportSubscription.time_start:type_name -> vrppb.Time
	0,  // 24: vrppb.QueryVertiportConstraintReferenceParameters.reservation_of_interest:type_name -> vrppb.VertiportReservation
	19, // 25: vrppb.QueryVertiportConstraintReferencesRequest.params:type_name -> vrppb.QueryVertiportConstraintReferenceParameters
	16, // 26: vrppb.DeleteVertiportSubscriptionResponse.subscription:type_name -> vrppb.VertiportSubscription
	2,  // 27: vrppb.GetVertiportConstraintReferenceResponse.constraint_reference:type_name -> vrppb.VertiportConstraintReference
	12, // 28: vrppb.GetVertiportOperationalIntentReferenceResponse.operational_intent_reference:type_name -> vrppb.VertiportOperationalIntentReference
	16, // 29: vrppb.GetVertiportSubscriptionResponse.subscription:type_name -> vrppb.VertiportSubscription
	2,  // 30: vrppb.QueryVertiportConstraintReferencesResponse.constraint_references:type_name -> vrppb.VertiportConstraintReference
	12, // 31: vrppb.QueryVertiportOperationalIntentReferenceResponse.operational_intent_references:type_name -> vrppb.VertiportOperationalIntentReference
	32, // 32: vrppb.QueryVertiportOperationalIntentReferencesRequest.params:type_name -> vrppb.QueryVertiportOperationalIntentReferenceParameters
	0,  // 33: vrppb.QueryVertiportOperationalIntentReferenceParameters.vertiport_reservation_of_interest:type_name -> vrppb.VertiportReservation
	0,  // 34: vrppb.QueryVertiportSubscriptionParameters.vertiport_reservation_of_interest:type_name -> vrppb.VertiportReservation
	33, // 35: vrppb.QueryVertiportSubscriptionsRequest.params:type_name -> vrppb.QueryVertiportSubscriptionParameters
	16, // 36: vrppb.QueryVertiportSubscriptionsResponse.subscriptions:type_name -> vrppb.VertiportSubscription
	4,  // 37: vrppb.UpdateVertiportConstraintReferenceRequest.params:type_name -> vrppb.PutVertiportConstraintReferenceParameters
	9,  // 38: vrppb.UpdateVertiportOperationalIntentReferenceRequest.params:type_name -> vrppb.PutVertiportOperationalIntentReferenceParameters
	14, // 39: vrppb.UpdateVertiportSubscriptionRequest.params:type_name -> vrppb.PutVertiportSubscriptionParameters
	3,  // 40: vrppb.UTMAPIVertiportsService.CreateVertiportConstraintReference:input_type -> vrppb.CreateVertiportConstraintReferenceRequest
	8,  // 41: vrppb.UTMAPIVertiportsService.CreateVertiportOperationalIntentReference:input_type -> vrppb.CreateVertiportOperationalIntentReferenceRequest
	13, // 42: vrppb.UTMAPIVertiportsService.CreateVertiportSubscription:input_type -> vrppb.CreateVertiportSubscriptionRequest
	17, // 43: vrppb.UTMAPIVertiportsService.DeleteVertiportConstraintReference:input_type -> vrppb.DeleteVertiportConstraintReferenceRequest
	18, // 44: vrppb.UTMAPIVertiportsService.DeleteVertiportOperationalIntentReference:input_type -> vrppb.DeleteVertiportOperationalIntentReferenceRequest
	21, // 45: vrppb.UTMAPIVertiportsService.DeleteSubscription:input_type -> vrppb.DeleteVertiportSubscriptionRequest
	23, // 46: vrppb.UTMAPIVertiportsService.GetVertiportConstraintReference:input_type -> vrppb.GetVertiportConstraintReferenceRequest
	25, // 47: vrppb.UTMAPIVertiportsService.GetVertiportOperationalIntentReference:input_type -> vrppb.GetVertiportOperationalIntentReferenceRequest
	27, // 48: vrppb.UTMAPIVertiportsService.GetVertiportSubscription:input_type -> vrppb.GetVertiportSubscriptionRequest
	20, // 49: vrppb.UTMAPIVertiportsService.QueryVertiportConstraintReferences:input_type -> vrppb.QueryVertiportConstraintReferencesRequest
	31, // 50: vrppb.UTMAPIVertiportsService.QueryVertiportOperationalIntentReferences:input_type -> vrppb.QueryVertiportOperationalIntentReferencesRequest
	34, // 51: vrppb.UTMAPIVertiportsService.QueryVertiportSubscriptions:input_type -> vrppb.QueryVertiportSubscriptionsRequest
	36, // 52: vrppb.UTMAPIVertiportsService.UpdateVertiportConstraintReference:input_type -> vrppb.UpdateVertiportConstraintReferenceRequest
	37, // 53: vrppb.UTMAPIVertiportsService.UpdateVertiportOperationalIntentReference:input_type -> vrppb.UpdateVertiportOperationalIntentReferenceRequest
	38, // 54: vrppb.UTMAPIVertiportsService.UpdateVertiportSubscription:input_type -> vrppb.UpdateVertiportSubscriptionRequest
	5,  // 55: vrppb.UTMAPIVertiportsService.CreateVertiportConstraintReference:output_type -> vrppb.ChangeVertiportConstraintReferenceResponse
	11, // 56: vrppb.UTMAPIVertiportsService.CreateVertiportOperationalIntentReference:output_type -> vrppb.ChangeVertiportOperationalIntentReferenceResponse
	15, // 57: vrppb.UTMAPIVertiportsService.CreateVertiportSubscription:output_type -> vrppb.PutVertiportSubscriptionResponse
	5,  // 58: vrppb.UTMAPIVertiportsService.DeleteVertiportConstraintReference:output_type -> vrppb.ChangeVertiportConstraintReferenceResponse
	11, // 59: vrppb.UTMAPIVertiportsService.DeleteVertiportOperationalIntentReference:output_type -> vrppb.ChangeVertiportOperationalIntentReferenceResponse
	22, // 60: vrppb.UTMAPIVertiportsService.DeleteSubscription:output_type -> vrppb.DeleteVertiportSubscriptionResponse
	24, // 61: vrppb.UTMAPIVertiportsService.GetVertiportConstraintReference:output_type -> vrppb.GetVertiportConstraintReferenceResponse
	26, // 62: vrppb.UTMAPIVertiportsService.GetVertiportOperationalIntentReference:output_type -> vrppb.GetVertiportOperationalIntentReferenceResponse
	28, // 63: vrppb.UTMAPIVertiportsService.GetVertiportSubscription:output_type -> vrppb.GetVertiportSubscriptionResponse
	29, // 64: vrppb.UTMAPIVertiportsService.QueryVertiportConstraintReferences:output_type -> vrppb.QueryVertiportConstraintReferencesResponse
	30, // 65: vrppb.UTMAPIVertiportsService.QueryVertiportOperationalIntentReferences:output_type -> vrppb.QueryVertiportOperationalIntentReferenceResponse
	35, // 66: vrppb.UTMAPIVertiportsService.QueryVertiportSubscriptions:output_type -> vrppb.QueryVertiportSubscriptionsResponse
	5,  // 67: vrppb.UTMAPIVertiportsService.UpdateVertiportConstraintReference:output_type -> vrppb.ChangeVertiportConstraintReferenceResponse
	11, // 68: vrppb.UTMAPIVertiportsService.UpdateVertiportOperationalIntentReference:output_type -> vrppb.ChangeVertiportOperationalIntentReferenceResponse
	15, // 69: vrppb.UTMAPIVertiportsService.UpdateVertiportSubscription:output_type -> vrppb.PutVertiportSubscriptionResponse
	55, // [55:70] is the sub-list for method output_type
	40, // [40:55] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_pkg_api_v1_vrppb_vrp_proto_init() }
func file_pkg_api_v1_vrppb_vrp_proto_init() {
	if File_pkg_api_v1_vrppb_vrp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertiportReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertiportConstraintReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVertiportConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutVertiportConstraintReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeVertiportConstraintReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertiportSubscriptionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertiportSubscriberToNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVertiportOperationalIntentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutVertiportOperationalIntentReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplicitVertiportSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeVertiportOperationalIntentReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertiportOperationalIntentReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVertiportSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutVertiportSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutVertiportSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertiportSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVertiportConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVertiportOperationalIntentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportConstraintReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportConstraintReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVertiportSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVertiportSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVertiportConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVertiportConstraintReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVertiportOperationalIntentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVertiportOperationalIntentReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVertiportSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVertiportSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportConstraintReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportOperationalIntentReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportOperationalIntentReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportOperationalIntentReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVertiportSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVertiportConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVertiportOperationalIntentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_vrppb_vrp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVertiportSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_v1_vrppb_vrp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_v1_vrppb_vrp_proto_goTypes,
		DependencyIndexes: file_pkg_api_v1_vrppb_vrp_proto_depIdxs,
		MessageInfos:      file_pkg_api_v1_vrppb_vrp_proto_msgTypes,
	}.Build()
	File_pkg_api_v1_vrppb_vrp_proto = out.File
	file_pkg_api_v1_vrppb_vrp_proto_rawDesc = nil
	file_pkg_api_v1_vrppb_vrp_proto_goTypes = nil
	file_pkg_api_v1_vrppb_vrp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UTMAPIVertiportsServiceClient is the client API for UTMAPIVertiportsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UTMAPIVertiportsServiceClient interface {
	// Create the specified constraint reference in the DSS.
	CreateVertiportConstraintReference(ctx context.Context, in *CreateVertiportConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportConstraintReferenceResponse, error)
	// Create the specified operational intent reference in the DSS.
	CreateVertiportOperationalIntentReference(ctx context.Context, in *CreateVertiportOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportOperationalIntentReferenceResponse, error)
	// Create the specified subscription in the DSS.
	//
	// Create a subscription.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	CreateVertiportSubscription(ctx context.Context, in *CreateVertiportSubscriptionRequest, opts ...grpc.CallOption) (*PutVertiportSubscriptionResponse, error)
	// Delete the specified constraint reference from the DSS.
	DeleteVertiportConstraintReference(ctx context.Context, in *DeleteVertiportConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportConstraintReferenceResponse, error)
	// Remove the specified operational intent reference from the DSS.
	DeleteVertiportOperationalIntentReference(ctx context.Context, in *DeleteVertiportOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportOperationalIntentReferenceResponse, error)
	// Remove the specified subscription from the DSS.
	//
	// The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to delete a subscription upon which an operational intent depends, the deletion will be rejected by the DSS as a bad request.
	DeleteSubscription(ctx context.Context, in *DeleteVertiportSubscriptionRequest, opts ...grpc.CallOption) (*DeleteVertiportSubscriptionResponse, error)
	// Retrieve the specified constraint reference from the DSS.
	GetVertiportConstraintReference(ctx context.Context, in *GetVertiportConstraintReferenceRequest, opts ...grpc.CallOption) (*GetVertiportConstraintReferenceResponse, error)
	// Retrieve the specified operational intent reference from the DSS.
	GetVertiportOperationalIntentReference(ctx context.Context, in *GetVertiportOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*GetVertiportOperationalIntentReferenceResponse, error)
	// Retrieve the specified subscription from the DSS.
	//
	// Retrieve a specific subscription.
	GetVertiportSubscription(ctx context.Context, in *GetVertiportSubscriptionRequest, opts ...grpc.CallOption) (*GetVertiportSubscriptionResponse, error)
	// Query all constraint references in the specified area/volume from the DSS.
	//
	// Note that this endpoint does not produce any mutations in the DSS
	// despite using the HTTP POST verb.  The HTTP GET verb is traditionally
	// used for operations like this one, but requiring or using a request body
	// for HTTP GET requests is non-standard and not supported by some
	// architectures.  POST is used here instead of GET to ensure robust
	// support for the use of a request body.
	QueryVertiportConstraintReferences(ctx context.Context, in *QueryVertiportConstraintReferencesRequest, opts ...grpc.CallOption) (*QueryVertiportConstraintReferencesResponse, error)
	// Query all operational intent references in the specified area/volume/time from the DSS.
	//
	// Note that this endpoint does not produce any mutations in the DSS
	// despite using the HTTP POST verb.  The HTTP GET verb is traditionally
	// used for operations like this one, but requiring or using a request body
	// for HTTP GET requests is non-standard and not supported by some
	// architectures.  POST is used here instead of GET to ensure robust
	// support for the use of a request body.
	QueryVertiportOperationalIntentReferences(ctx context.Context, in *QueryVertiportOperationalIntentReferencesRequest, opts ...grpc.CallOption) (*QueryVertiportOperationalIntentReferenceResponse, error)
	// Query all subscriptions in the specified area/volume from the DSS.
	//
	// Query subscriptions intersecting an area of interest.  Subscription
	// notifications are only triggered by (and contain full information of) changes to,
	// creation of, or deletion of, Entities referenced by or stored in the DSS;
	// they do not involve any data transfer (such as remote ID telemetry updates) apart
	// from Entity information.
	//
	// Note that this parameter is a JSON object (in the 'request-body'). Note that either
	// or both of the 'altitude' and 'time' values may be omitted from this parameter.
	//
	// Only subscriptions belonging to the caller are returned.  This endpoint would be
	// used if a USS lost track of subscriptions they had created and/or wanted to resolve
	// an error indicating that they had too many existing subscriptions in an area.
	QueryVertiportSubscriptions(ctx context.Context, in *QueryVertiportSubscriptionsRequest, opts ...grpc.CallOption) (*QueryVertiportSubscriptionsResponse, error)
	// Update the specified constraint reference in the DSS.
	UpdateVertiportConstraintReference(ctx context.Context, in *UpdateVertiportConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportConstraintReferenceResponse, error)
	// Update the specified operational intent reference in the DSS.
	UpdateVertiportOperationalIntentReference(ctx context.Context, in *UpdateVertiportOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportOperationalIntentReferenceResponse, error)
	// Update the specified subscription in the DSS.
	//
	// Update a subscription.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	//
	// The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to update a subscription upon which an operational intent depends, and this update would cause the operational intent to lose subscription coverage, the update will be rejected by the DSS as a bad request.
	UpdateVertiportSubscription(ctx context.Context, in *UpdateVertiportSubscriptionRequest, opts ...grpc.CallOption) (*PutVertiportSubscriptionResponse, error)
}

type uTMAPIVertiportsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUTMAPIVertiportsServiceClient(cc grpc.ClientConnInterface) UTMAPIVertiportsServiceClient {
	return &uTMAPIVertiportsServiceClient{cc}
}

func (c *uTMAPIVertiportsServiceClient) CreateVertiportConstraintReference(ctx context.Context, in *CreateVertiportConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportConstraintReferenceResponse, error) {
	out := new(ChangeVertiportConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/CreateVertiportConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) CreateVertiportOperationalIntentReference(ctx context.Context, in *CreateVertiportOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportOperationalIntentReferenceResponse, error) {
	out := new(ChangeVertiportOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/CreateVertiportOperationalIntentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) CreateVertiportSubscription(ctx context.Context, in *CreateVertiportSubscriptionRequest, opts ...grpc.CallOption) (*PutVertiportSubscriptionResponse, error) {
	out := new(PutVertiportSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/CreateVertiportSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) DeleteVertiportConstraintReference(ctx context.Context, in *DeleteVertiportConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportConstraintReferenceResponse, error) {
	out := new(ChangeVertiportConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/DeleteVertiportConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) DeleteVertiportOperationalIntentReference(ctx context.Context, in *DeleteVertiportOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportOperationalIntentReferenceResponse, error) {
	out := new(ChangeVertiportOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/DeleteVertiportOperationalIntentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) DeleteSubscription(ctx context.Context, in *DeleteVertiportSubscriptionRequest, opts ...grpc.CallOption) (*DeleteVertiportSubscriptionResponse, error) {
	out := new(DeleteVertiportSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) GetVertiportConstraintReference(ctx context.Context, in *GetVertiportConstraintReferenceRequest, opts ...grpc.CallOption) (*GetVertiportConstraintReferenceResponse, error) {
	out := new(GetVertiportConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/GetVertiportConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) GetVertiportOperationalIntentReference(ctx context.Context, in *GetVertiportOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*GetVertiportOperationalIntentReferenceResponse, error) {
	out := new(GetVertiportOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/GetVertiportOperationalIntentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) GetVertiportSubscription(ctx context.Context, in *GetVertiportSubscriptionRequest, opts ...grpc.CallOption) (*GetVertiportSubscriptionResponse, error) {
	out := new(GetVertiportSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/GetVertiportSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) QueryVertiportConstraintReferences(ctx context.Context, in *QueryVertiportConstraintReferencesRequest, opts ...grpc.CallOption) (*QueryVertiportConstraintReferencesResponse, error) {
	out := new(QueryVertiportConstraintReferencesResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/QueryVertiportConstraintReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) QueryVertiportOperationalIntentReferences(ctx context.Context, in *QueryVertiportOperationalIntentReferencesRequest, opts ...grpc.CallOption) (*QueryVertiportOperationalIntentReferenceResponse, error) {
	out := new(QueryVertiportOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/QueryVertiportOperationalIntentReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) QueryVertiportSubscriptions(ctx context.Context, in *QueryVertiportSubscriptionsRequest, opts ...grpc.CallOption) (*QueryVertiportSubscriptionsResponse, error) {
	out := new(QueryVertiportSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/QueryVertiportSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) UpdateVertiportConstraintReference(ctx context.Context, in *UpdateVertiportConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportConstraintReferenceResponse, error) {
	out := new(ChangeVertiportConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/UpdateVertiportConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) UpdateVertiportOperationalIntentReference(ctx context.Context, in *UpdateVertiportOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeVertiportOperationalIntentReferenceResponse, error) {
	out := new(ChangeVertiportOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/UpdateVertiportOperationalIntentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIVertiportsServiceClient) UpdateVertiportSubscription(ctx context.Context, in *UpdateVertiportSubscriptionRequest, opts ...grpc.CallOption) (*PutVertiportSubscriptionResponse, error) {
	out := new(PutVertiportSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/vrppb.UTMAPIVertiportsService/UpdateVertiportSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UTMAPIVertiportsServiceServer is the server API for UTMAPIVertiportsService service.
type UTMAPIVertiportsServiceServer interface {
	// Create the specified constraint reference in the DSS.
	CreateVertiportConstraintReference(context.Context, *CreateVertiportConstraintReferenceRequest) (*ChangeVertiportConstraintReferenceResponse, error)
	// Create the specified operational intent reference in the DSS.
	CreateVertiportOperationalIntentReference(context.Context, *CreateVertiportOperationalIntentReferenceRequest) (*ChangeVertiportOperationalIntentReferenceResponse, error)
	// Create the specified subscription in the DSS.
	//
	// Create a subscription.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	CreateVertiportSubscription(context.Context, *CreateVertiportSubscriptionRequest) (*PutVertiportSubscriptionResponse, error)
	// Delete the specified constraint reference from the DSS.
	DeleteVertiportConstraintReference(context.Context, *DeleteVertiportConstraintReferenceRequest) (*ChangeVertiportConstraintReferenceResponse, error)
	// Remove the specified operational intent reference from the DSS.
	DeleteVertiportOperationalIntentReference(context.Context, *DeleteVertiportOperationalIntentReferenceRequest) (*ChangeVertiportOperationalIntentReferenceResponse, error)
	// Remove the specified subscription from the DSS.
	//
	// The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to delete a subscription upon which an operational intent depends, the deletion will be rejected by the DSS as a bad request.
	DeleteSubscription(context.Context, *DeleteVertiportSubscriptionRequest) (*DeleteVertiportSubscriptionResponse, error)
	// Retrieve the specified constraint reference from the DSS.
	GetVertiportConstraintReference(context.Context, *GetVertiportConstraintReferenceRequest) (*GetVertiportConstraintReferenceResponse, error)
	// Retrieve the specified operational intent reference from the DSS.
	GetVertiportOperationalIntentReference(context.Context, *GetVertiportOperationalIntentReferenceRequest) (*GetVertiportOperationalIntentReferenceResponse, error)
	// Retrieve the specified subscription from the DSS.
	//
	// Retrieve a specific subscription.
	GetVertiportSubscription(context.Context, *GetVertiportSubscriptionRequest) (*GetVertiportSubscriptionResponse, error)
	// Query all constraint references in the specified area/volume from the DSS.
	//
	// Note that this endpoint does not produce any mutations in the DSS
	// despite using the HTTP POST verb.  The HTTP GET verb is traditionally
	// used for operations like this one, but requiring or using a request body
	// for HTTP GET requests is non-standard and not supported by some
	// architectures.  POST is used here instead of GET to ensure robust
	// support for the use of a request body.
	QueryVertiportConstraintReferences(context.Context, *QueryVertiportConstraintReferencesRequest) (*QueryVertiportConstraintReferencesResponse, error)
	// Query all operational intent references in the specified area/volume/time from the DSS.
	//
	// Note that this endpoint does not produce any mutations in the DSS
	// despite using the HTTP POST verb.  The HTTP GET verb is traditionally
	// used for operations like this one, but requiring or using a request body
	// for HTTP GET requests is non-standard and not supported by some
	// architectures.  POST is used here instead of GET to ensure robust
	// support for the use of a request body.
	QueryVertiportOperationalIntentReferences(context.Context, *QueryVertiportOperationalIntentReferencesRequest) (*QueryVertiportOperationalIntentReferenceResponse, error)
	// Query all subscriptions in the specified area/volume from the DSS.
	//
	// Query subscriptions intersecting an area of interest.  Subscription
	// notifications are only triggered by (and contain full information of) changes to,
	// creation of, or deletion of, Entities referenced by or stored in the DSS;
	// they do not involve any data transfer (such as remote ID telemetry updates) apart
	// from Entity information.
	//
	// Note that this parameter is a JSON object (in the 'request-body'). Note that either
	// or both of the 'altitude' and 'time' values may be omitted from this parameter.
	//
	// Only subscriptions belonging to the caller are returned.  This endpoint would be
	// used if a USS lost track of subscriptions they had created and/or wanted to resolve
	// an error indicating that they had too many existing subscriptions in an area.
	QueryVertiportSubscriptions(context.Context, *QueryVertiportSubscriptionsRequest) (*QueryVertiportSubscriptionsResponse, error)
	// Update the specified constraint reference in the DSS.
	UpdateVertiportConstraintReference(context.Context, *UpdateVertiportConstraintReferenceRequest) (*ChangeVertiportConstraintReferenceResponse, error)
	// Update the specified operational intent reference in the DSS.
	UpdateVertiportOperationalIntentReference(context.Context, *UpdateVertiportOperationalIntentReferenceRequest) (*ChangeVertiportOperationalIntentReferenceResponse, error)
	// Update the specified subscription in the DSS.
	//
	// Update a subscription.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	//
	// The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to update a subscription upon which an operational intent depends, and this update would cause the operational intent to lose subscription coverage, the update will be rejected by the DSS as a bad request.
	UpdateVertiportSubscription(context.Context, *UpdateVertiportSubscriptionRequest) (*PutVertiportSubscriptionResponse, error)
}

// UnimplementedUTMAPIVertiportsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUTMAPIVertiportsServiceServer struct {
}

func (*UnimplementedUTMAPIVertiportsServiceServer) CreateVertiportConstraintReference(context.Context, *CreateVertiportConstraintReferenceRequest) (*ChangeVertiportConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVertiportConstraintReference not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) CreateVertiportOperationalIntentReference(context.Context, *CreateVertiportOperationalIntentReferenceRequest) (*ChangeVertiportOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVertiportOperationalIntentReference not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) CreateVertiportSubscription(context.Context, *CreateVertiportSubscriptionRequest) (*PutVertiportSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVertiportSubscription not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) DeleteVertiportConstraintReference(context.Context, *DeleteVertiportConstraintReferenceRequest) (*ChangeVertiportConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVertiportConstraintReference not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) DeleteVertiportOperationalIntentReference(context.Context, *DeleteVertiportOperationalIntentReferenceRequest) (*ChangeVertiportOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVertiportOperationalIntentReference not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) DeleteSubscription(context.Context, *DeleteVertiportSubscriptionRequest) (*DeleteVertiportSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) GetVertiportConstraintReference(context.Context, *GetVertiportConstraintReferenceRequest) (*GetVertiportConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertiportConstraintReference not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) GetVertiportOperationalIntentReference(context.Context, *GetVertiportOperationalIntentReferenceRequest) (*GetVertiportOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertiportOperationalIntentReference not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) GetVertiportSubscription(context.Context, *GetVertiportSubscriptionRequest) (*GetVertiportSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertiportSubscription not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) QueryVertiportConstraintReferences(context.Context, *QueryVertiportConstraintReferencesRequest) (*QueryVertiportConstraintReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVertiportConstraintReferences not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) QueryVertiportOperationalIntentReferences(context.Context, *QueryVertiportOperationalIntentReferencesRequest) (*QueryVertiportOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVertiportOperationalIntentReferences not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) QueryVertiportSubscriptions(context.Context, *QueryVertiportSubscriptionsRequest) (*QueryVertiportSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVertiportSubscriptions not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) UpdateVertiportConstraintReference(context.Context, *UpdateVertiportConstraintReferenceRequest) (*ChangeVertiportConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVertiportConstraintReference not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) UpdateVertiportOperationalIntentReference(context.Context, *UpdateVertiportOperationalIntentReferenceRequest) (*ChangeVertiportOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVertiportOperationalIntentReference not implemented")
}
func (*UnimplementedUTMAPIVertiportsServiceServer) UpdateVertiportSubscription(context.Context, *UpdateVertiportSubscriptionRequest) (*PutVertiportSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVertiportSubscription not implemented")
}

func RegisterUTMAPIVertiportsServiceServer(s *grpc.Server, srv UTMAPIVertiportsServiceServer) {
	s.RegisterService(&_UTMAPIVertiportsService_serviceDesc, srv)
}

func _UTMAPIVertiportsService_CreateVertiportConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVertiportConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).CreateVertiportConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/CreateVertiportConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).CreateVertiportConstraintReference(ctx, req.(*CreateVertiportConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_CreateVertiportOperationalIntentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVertiportOperationalIntentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).CreateVertiportOperationalIntentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/CreateVertiportOperationalIntentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).CreateVertiportOperationalIntentReference(ctx, req.(*CreateVertiportOperationalIntentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_CreateVertiportSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVertiportSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).CreateVertiportSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/CreateVertiportSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).CreateVertiportSubscription(ctx, req.(*CreateVertiportSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_DeleteVertiportConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVertiportConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).DeleteVertiportConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/DeleteVertiportConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).DeleteVertiportConstraintReference(ctx, req.(*DeleteVertiportConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_DeleteVertiportOperationalIntentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVertiportOperationalIntentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).DeleteVertiportOperationalIntentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/DeleteVertiportOperationalIntentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).DeleteVertiportOperationalIntentReference(ctx, req.(*DeleteVertiportOperationalIntentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVertiportSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).DeleteSubscription(ctx, req.(*DeleteVertiportSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_GetVertiportConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVertiportConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).GetVertiportConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/GetVertiportConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).GetVertiportConstraintReference(ctx, req.(*GetVertiportConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_GetVertiportOperationalIntentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVertiportOperationalIntentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).GetVertiportOperationalIntentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/GetVertiportOperationalIntentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).GetVertiportOperationalIntentReference(ctx, req.(*GetVertiportOperationalIntentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_GetVertiportSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVertiportSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).GetVertiportSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/GetVertiportSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).GetVertiportSubscription(ctx, req.(*GetVertiportSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_QueryVertiportConstraintReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVertiportConstraintReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).QueryVertiportConstraintReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/QueryVertiportConstraintReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).QueryVertiportConstraintReferences(ctx, req.(*QueryVertiportConstraintReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_QueryVertiportOperationalIntentReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVertiportOperationalIntentReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).QueryVertiportOperationalIntentReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/QueryVertiportOperationalIntentReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).QueryVertiportOperationalIntentReferences(ctx, req.(*QueryVertiportOperationalIntentReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_QueryVertiportSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVertiportSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).QueryVertiportSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/QueryVertiportSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).QueryVertiportSubscriptions(ctx, req.(*QueryVertiportSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_UpdateVertiportConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVertiportConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).UpdateVertiportConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/UpdateVertiportConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).UpdateVertiportConstraintReference(ctx, req.(*UpdateVertiportConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_UpdateVertiportOperationalIntentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVertiportOperationalIntentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).UpdateVertiportOperationalIntentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/UpdateVertiportOperationalIntentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).UpdateVertiportOperationalIntentReference(ctx, req.(*UpdateVertiportOperationalIntentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIVertiportsService_UpdateVertiportSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVertiportSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIVertiportsServiceServer).UpdateVertiportSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrppb.UTMAPIVertiportsService/UpdateVertiportSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIVertiportsServiceServer).UpdateVertiportSubscription(ctx, req.(*UpdateVertiportSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UTMAPIVertiportsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vrppb.UTMAPIVertiportsService",
	HandlerType: (*UTMAPIVertiportsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVertiportConstraintReference",
			Handler:    _UTMAPIVertiportsService_CreateVertiportConstraintReference_Handler,
		},
		{
			MethodName: "CreateVertiportOperationalIntentReference",
			Handler:    _UTMAPIVertiportsService_CreateVertiportOperationalIntentReference_Handler,
		},
		{
			MethodName: "CreateVertiportSubscription",
			Handler:    _UTMAPIVertiportsService_CreateVertiportSubscription_Handler,
		},
		{
			MethodName: "DeleteVertiportConstraintReference",
			Handler:    _UTMAPIVertiportsService_DeleteVertiportConstraintReference_Handler,
		},
		{
			MethodName: "DeleteVertiportOperationalIntentReference",
			Handler:    _UTMAPIVertiportsService_DeleteVertiportOperationalIntentReference_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _UTMAPIVertiportsService_DeleteSubscription_Handler,
		},
		{
			MethodName: "GetVertiportConstraintReference",
			Handler:    _UTMAPIVertiportsService_GetVertiportConstraintReference_Handler,
		},
		{
			MethodName: "GetVertiportOperationalIntentReference",
			Handler:    _UTMAPIVertiportsService_GetVertiportOperationalIntentReference_Handler,
		},
		{
			MethodName: "GetVertiportSubscription",
			Handler:    _UTMAPIVertiportsService_GetVertiportSubscription_Handler,
		},
		{
			MethodName: "QueryVertiportConstraintReferences",
			Handler:    _UTMAPIVertiportsService_QueryVertiportConstraintReferences_Handler,
		},
		{
			MethodName: "QueryVertiportOperationalIntentReferences",
			Handler:    _UTMAPIVertiportsService_QueryVertiportOperationalIntentReferences_Handler,
		},
		{
			MethodName: "QueryVertiportSubscriptions",
			Handler:    _UTMAPIVertiportsService_QueryVertiportSubscriptions_Handler,
		},
		{
			MethodName: "UpdateVertiportConstraintReference",
			Handler:    _UTMAPIVertiportsService_UpdateVertiportConstraintReference_Handler,
		},
		{
			MethodName: "UpdateVertiportOperationalIntentReference",
			Handler:    _UTMAPIVertiportsService_UpdateVertiportOperationalIntentReference_Handler,
		},
		{
			MethodName: "UpdateVertiportSubscription",
			Handler:    _UTMAPIVertiportsService_UpdateVertiportSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/vrppb/vrp.proto",
}
